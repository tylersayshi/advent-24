//hi
const real = `..................................D...............
..o.............................D..............b..
.H....o........z...........D......................
.......................Y...O............1.........
......4...............N....................d......
........4......................D..........d.......
.o.............4................1.................
.......................................y.1......w.
..........Y.H..........5.........y.......b........
...Q.....H......Y...............y..m..............
.........Q.Y..............O..................m....
............................N...O.................
....5.............................8...........b...
....H....................................w........
.........................1.....O..y.........d.....
.........................4........................
...............................2..................
........Q...5.....................................
..............0...................................
.....................0...Z...2....................
.....0.........................MZ.m...............
...6........0...........Z.....m..................d
.................................B.E..............
......6...........................................
.......................................8..B.......
..z......5.............................7.....8....
..................................................
......................................2...........
.........Z..6....................q................
..................................................
.......6.................G..7.....................
.......z................I.....b.B...............e.
.........N..............................2...M.....
..G...............................................
...................w...g.....7......E.............
...........................q...n..........M.E.....
........................................I.........
................................W.......7..e......
..........................9....................W..
...............G.3..8..............B.9.......i....
..................................n..............3
....................3................E............
............................3........h..i.........
....................9......hi...............n..M..
..............z..............I....h..............i
..............h............g......................
....................G..............e..............
...............................I............g.....
................q...g..9..........e...W......n....
.......................................W..........`;

const test = `............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............
`;

const test2 = `..........
..........
..........
....a.....
..........
.....a....
..........
..........
..........
..........`;

const getNumThings = (input: string) => {
  const allRows = input.split("\n").map((r) => r.split(""));
  const xLength = allRows[0].length;
  const yLength = allRows.length;

  const { signalCoords, signalPositions } = allRows.reduce<{
    signalCoords: Map<string, [number, number][]>;
    signalPositions: Set<string>;
  }>(
    (acc, row, y) => {
      for (let x = 0; x < row.length; x++) {
        const item = row[x]!;
        if (item === ".") continue;
        if (acc.signalCoords.has(item)) {
          acc.signalCoords.get(item)!.push([x, y]);
        } else {
          acc.signalCoords.set(item, [[x, y]]);
        }
        acc.signalPositions.add(JSON.stringify([x, y]));
      }
      return acc;
    },
    { signalCoords: new Map(), signalPositions: new Set() }
  );
  const hashThings = new Set<string>();

  const addPoint = (point: [number, number]) => {
    const [x, y] = point;

    if (
      x < 0 ||
      x >= xLength ||
      y < 0 ||
      y >= yLength ||
      signalPositions.has(JSON.stringify(point))
    ) {
      return;
    }
    hashThings.add(JSON.stringify(point));
  };

  for (const [_signal, positions] of signalCoords) {
    // permutations of positions

    // when spot is both in the input and

    for (let i = 0; i < positions.length; i++) {
      for (let j = 0; j < positions.length; j++) {
        if (j === i) continue;

        const firstPoint = positions[i];
        const otherPoint = positions[j];

        const dx = Math.abs(firstPoint[0] - otherPoint[0]);
        const dy = Math.abs(firstPoint[1] - otherPoint[1]);

        // the top one we want to subtract y from
        // the left one we want to subtract x from
        // vise versa

        const [try1, try2] = (() => {
          if (firstPoint[0] < otherPoint[0]) {
            if (firstPoint[1] < otherPoint[1]) {
              return [
                [firstPoint[0] - dx, firstPoint[1] - dy],
                [otherPoint[0] + dx, otherPoint[1] + dy],
              ] as [number, number][];
            } else {
              return [
                [firstPoint[0] - dx, firstPoint[1] + dy],
                [otherPoint[0] + dx, otherPoint[1] - dy],
              ] as [number, number][];
            }
          } else {
            if (firstPoint[1] < otherPoint[1]) {
              return [
                [firstPoint[0] + dx, firstPoint[1] - dy],
                [otherPoint[0] - dx, otherPoint[1] + dy],
              ] as [number, number][];
            } else {
              return [
                [firstPoint[0] + dx, firstPoint[1] + dy],
                [otherPoint[0] - dx, otherPoint[1] - dy],
              ] as [number, number][];
            }
          }
        })();
        console.log({ try1, try2, firstPoint, otherPoint });

        addPoint(try1);
        addPoint(try2);
      }
    }
  }

  for (const thing of hashThings) {
    const [x, y] = JSON.parse(thing);
    if (allRows[y][x] !== ".") {
      console.log("HASHDJD:", { x, y, xLength, yLength, thing: allRows[y][x] });
    }
    allRows[y][x] = "#";
  }
  const resString = allRows.map((r) => r.join("")).join("\n");
  console.log(resString);
  console.log(hashThings.size);
  console.log(
    "before",
    real.split("").filter((c) => c !== "." && c !== "#" && c !== "\n")
  );
  console.log(
    "after",
    resString.split("").filter((c) => c !== "." && c !== "#" && c !== "\n")
  );
  const before = real.split("").filter((c) => c !== "." && c !== "\n").length;
  const after = resString
    .split("")
    .filter((c) => c !== "." && c !== "#" && c !== "\n").length;
  console.log({ before, after });
};

getNumThings(real);
